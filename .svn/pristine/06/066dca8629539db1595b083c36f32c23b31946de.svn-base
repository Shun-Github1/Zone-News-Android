package com.anssy.znewspro.ui.mainfrag

import android.annotation.SuppressLint
import android.content.Intent
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.viewModels
import com.anssy.videolive.utils.Constants
import com.anssy.znewspro.R
import com.anssy.znewspro.base.BaseFragment
import com.anssy.znewspro.databinding.FragMyBinding
import com.anssy.znewspro.model.LoginModel
import com.anssy.znewspro.model.MyModel
import com.anssy.znewspro.ui.MainActivity
import com.anssy.znewspro.ui.collect.MyCollectListActivity
import com.anssy.znewspro.ui.his.BrownHisActivity
import com.anssy.znewspro.ui.login.LoginActivity
import com.anssy.znewspro.ui.web.WebActivity
import com.anssy.znewspro.utils.SharedPreferenceUtils
import com.anssy.znewspro.utils.ToastUtils
import com.anssy.znewspro.utils.Utils
import com.bumptech.glide.Glide
import com.kongzue.dialogx.dialogs.MessageDialog

/**
 * @Description 我的
 * @Author yulu
 * @CreateTime 2025年06月30日 09:28:07
 */

class MyFrag : BaseFragment() {
    private lateinit var  mViewBinding:FragMyBinding
    private val loginModel:LoginModel by viewModels()
    private val myModel:MyModel by viewModels()
    companion object{
        fun  getInstance():MyFrag{
            return MyFrag()
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        mViewBinding = FragMyBinding.inflate(layoutInflater)
        return mViewBinding.root
    }

    @SuppressLint("SetTextI18n")
    override fun initData() {
        mViewBinding.versionTv.text = "v"+mContext?.let { Utils.getVersionName(it) }
        mViewBinding.settingIv.setOnClickListener {
            (requireActivity() as MainActivity).showSettingPop(it)
        }
        mViewBinding.hisLayout.setOnClickListener {
            val intent = Intent(mContext,BrownHisActivity::class.java)
            startActivity(intent)
        }
        mViewBinding.collectLayout.setOnClickListener {
            val intent = Intent(mContext,MyCollectListActivity::class.java)
            startActivity(intent)
        }
        mViewBinding.aboutLayout.setOnClickListener {
            myModel.queryAboutUs()
        }
        iniModel()
        mViewBinding.outBtn.setOnClickListener {
            MessageDialog.show("提醒","确定要退出登录吗？","确定","取消")
                .setOkButtonClickListener { dialog, v ->
                    dialog.dismiss()
                    loginModel.outLoginApp()
                    true
                }
                .setCancelButtonClickListener { dialog, v ->
                    dialog.dismiss()
                    true
                }
        }
    }



    @SuppressLint("SetTextI18n")
    private fun iniModel(){
        myModel.queryMyFormation()
        myModel.myEntry.observe(this){
            if (it!=null){
                if (it.code==Constants.SUCCESS_CODE){
                    Glide.with(mContext!!).load(it.data.profileIcon).error(R.drawable.ease_default_image)
                        .into(mViewBinding.avatarIv)
                    mViewBinding.userIdTv.text = "用户ID:${it.data.profileID}"
                }else{
                    if (it.code==1000){
                        ToastUtils.showShortToast(mContext!!,"服务器错误")
                    }else{
                        ToastUtils.showShortToast(mContext!!,it.msg)
                    }
                }
            }
        }
        myModel.myAboutUsEntry.observe(this){
            if (it!=null){
                if (it.code==Constants.SUCCESS_CODE){
                    val intent = Intent(mContext,WebActivity::class.java)
                    intent.putExtra("type","about")
                    SharedPreferenceUtils.saveString(mContext,"content",it.data.content)
                    startActivity(intent)
                }else{
                    if (it.code==1000){
                        ToastUtils.showShortToast(mContext!!,"服务器错误")
                    }else{
                        ToastUtils.showShortToast(mContext!!,it.msg)
                    }
                }
            }
        }
        loginModel.outLoginEntry.observe(this){
            SharedPreferenceUtils.clear(mContext)
            SharedPreferenceUtils.saveBoolean(mContext,"isLogin",false)
            val intent =  Intent(mContext,LoginActivity::class.java)
            startActivity(intent)
            requireActivity().finishAffinity()
        }
    }
}