package com.anssy.znewspro.ui.topicmodify

import android.annotation.SuppressLint
import android.content.Intent
import android.os.Bundle
import android.view.Gravity
import android.view.View
import android.widget.ImageView
import android.widget.TextView
import androidx.activity.viewModels
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.anssy.znewspro.utils.Constants
import com.anssy.znewspro.R
import com.anssy.znewspro.base.BaseActivity
import com.anssy.znewspro.databinding.ActivityTopicModifyBinding
import com.anssy.znewspro.model.TopicModel
import com.anssy.znewspro.utils.SharedPreferenceUtils
import com.anssy.znewspro.utils.ToastUtils
import com.jaeger.library.StatusBarUtil
import com.kongzue.dialogx.dialogs.BottomMenu
import com.kongzue.dialogx.dialogs.TipDialog
import com.kongzue.dialogx.dialogs.WaitDialog
import com.kongzue.dialogx.util.TextInfo
import com.zhy.adapter.recyclerview.CommonAdapter
import com.zhy.adapter.recyclerview.base.ViewHolder

/**
 * @Description 编辑主题
 * @Author yulu
 * @CreateTime 2025年07月01日 16:10:23
 */

class TopicModifyActivity :BaseActivity() {
    private val topicModel:TopicModel by viewModels()
    private lateinit var mViewBinding:ActivityTopicModifyBinding
    private var mList = ArrayList<String>()
    private lateinit var mAdapter:CommonAdapter<String>
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        mViewBinding = ActivityTopicModifyBinding.inflate(layoutInflater)
        setContentView(mViewBinding.root)
        StatusBarUtil.setLightMode(this)
        StatusBarUtil.setColor(this,getColor(R.color.white),0)
        initView()
        initModel()
    }


    @SuppressLint("NotifyDataSetChanged")
    private fun initModel(){
        topicModel.queryMyTopics()
        topicModel.topicListEntry.observe(this){
            if (it!=null){
                if (it.code== Constants.SUCCESS_CODE){
                    mList.clear()
                    mList.addAll(it.data.topics)
                    SharedPreferenceUtils.putList(mContext,"list",mList)
                    mAdapter.notifyDataSetChanged()
                    if (mList.isEmpty()){
                        mViewBinding.noDataLayout.root.visibility = View.VISIBLE
                    }else{
                        mViewBinding.noDataLayout.root.visibility = View.GONE
                    }
                }else{
                    if (it.code==1000){
                        ToastUtils.showShortToast(mContext!!,"服务器错误")
                    }else{
                        ToastUtils.showShortToast(mContext!!,it.msg)
                    }
                }
            }
        }
        topicModel.commonResponseEntry.observe(this){
            if(it!=null){
                if (it.code== Constants.SUCCESS_CODE){
                    setResult(RESULT_OK)
                    TipDialog.show("Delete Success",WaitDialog.TYPE.SUCCESS)
                    mList.remove(it.msg)
                    mAdapter.notifyDataSetChanged()
                }else{
                    if (it.code==1000){
                        TipDialog.show("Server Error",WaitDialog.TYPE.ERROR)
                    }else{
                        TipDialog.show(it.msg,WaitDialog.TYPE.ERROR)
                    }
                }
            }else{
                WaitDialog.dismiss()
            }
        }
    }




    private fun initView() {
        mViewBinding.topicRecycler.layoutManager = LinearLayoutManager(this,RecyclerView.VERTICAL,false)
        mAdapter = object : CommonAdapter<String>(this,R.layout.item_topic_recycler,mList){
            override fun convert(holder: ViewHolder, t: String, position: Int) {
                val topicTv:TextView = holder.getView(R.id.topic_tv)
                topicTv.text = t
                val deleteIv :ImageView = holder.getView(R.id.delete_iv)
                deleteIv.setOnClickListener {
                    BottomMenu.show(arrayOf("删除","取消"))
                        .setMenuTextInfo(TextInfo().setGravity(Gravity.CENTER))
                        .setOnMenuItemClickListener { dialog, text, index ->
                            dialog.dismiss()
                            if (index==0){
                                WaitDialog.show("正在提交")
                                topicModel.editTopic(Constants.TYPE_TOPIC_DELETE,t)
                            }
                            true
                        }

                }
            }
        }
        mViewBinding.topicRecycler.adapter = mAdapter
        mViewBinding.addIv.setOnClickListener {
            // startActivity(MainActivity::class, {
            //            // 自定义返回 ActivityOptionsCompat, 详细请查看README完整API说明
            //            null
            //        }) {
            //            putExtra("key", "value")
            //        }
            startActivityForResult(Intent(this, TopicAllActivity::class.java)){ code: Int, data: Intent? ->
                // code = resultCode
                if (code== RESULT_OK){
                    topicModel.queryMyTopics()
                }
            }

        }
    }


}