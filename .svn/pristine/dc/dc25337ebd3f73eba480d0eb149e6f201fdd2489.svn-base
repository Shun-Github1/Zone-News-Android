package com.anssy.znewspro.model

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.anssy.znewspro.entry.SearchListEntry
import com.anssy.znewspro.repository.SearchRepository
import com.anssy.znewspro.utils.network.exception.NetworkResponse
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import javax.inject.Inject

/**
 * @Description 搜索
 * @Author yulu
 * @CreateTime 2025年07月04日 16:28:13
 */

@HiltViewModel
class SearchModel @Inject constructor(private val searchRepository: SearchRepository):ViewModel() {
    private var _searchListEntry:MutableLiveData<SearchListEntry> = MutableLiveData<SearchListEntry>()
    var searchListEntry:LiveData<SearchListEntry> = _searchListEntry
    fun querySearchList(){
        viewModelScope.launch {
           val result =  withContext(Dispatchers.IO){
                 searchRepository.querySearchList()
            }
            when(result){
                is NetworkResponse.NetError->{
                    val searchListEntry = SearchListEntry()
                    searchListEntry.code = 1000
                    searchListEntry.msg = "服务器错误"
                    _searchListEntry.value = searchListEntry
                }
                is NetworkResponse.Success->{
                    _searchListEntry.value = result.body
                }
                is NetworkResponse.UnknownError->{
                    val searchListEntry = SearchListEntry()
                    searchListEntry.code = 1000
                    searchListEntry.msg = "未知错误"
                    _searchListEntry.value = searchListEntry
                }
            }
        }
    }
    fun  queryListByTitle(title:String){
        viewModelScope.launch {
            val result = withContext(Dispatchers.IO){
                searchRepository.queryNewsByTitle(title)
            }
            when(result){
                is NetworkResponse.NetError->{
                    val searchListEntry = SearchListEntry()
                    searchListEntry.code = 1000
                    searchListEntry.msg = "服务器错误"
                    _searchListEntry.value = searchListEntry
                }
                is NetworkResponse.Success->{
                    _searchListEntry.value = result.body
                }
                is NetworkResponse.UnknownError->{
                    val searchListEntry = SearchListEntry()
                    searchListEntry.code = 1000
                    searchListEntry.msg = "未知错误"
                    _searchListEntry.value = searchListEntry
                }
            }
        }
    }
}